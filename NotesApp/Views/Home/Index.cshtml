@model List<NotesApp.Models.Note>
@using NotesApp.Models

@{
    ViewData["Title"] = "Мої нотатки";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="display-6 fw-bold text-primary">
            <i class="bi bi-journal-text me-2"></i>@ViewData["Title"]
        </h1>
        <button class="btn btn-primary rounded-pill px-4 py-2 fw-bold" data-bs-toggle="modal" data-bs-target="#createModal">
            <i class="bi bi-plus-lg me-2"></i>Додати нотатку
        </button>
    </div>

    <!-- Контейнер для сповіщень -->
    <div id="notifications-container" style="position: fixed; bottom: 20px; right: 20px; z-index: 1000;"></div>

    @if (Model.Any())
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4" id="notes-container">
            @foreach (var note in Model)
            {
                <div class="col note-item">
                    <div class="card note-card h-100 border-0 shadow-sm" id="note-card-@note.Id">
                        <div class="card-body position-relative">
                            @if (note.ReminderAt.HasValue)
                            {
                                <span class="badge bg-warning text-dark position-absolute top-0 end-0 m-2">
                                    <i class="bi bi-alarm me-1"></i>@note.ReminderAt?.ToString("g")
                                </span>
                            }
                            <h5 class="card-title fw-bold text-truncate">@note.Title</h5>
                            <p class="card-text note-content">@note.Content</p>
                            <div class="text-muted small mb-3">
                                <i class="bi bi-clock me-1"></i>Створено: @note.CreatedAt.ToString("g")
                            </div>
                            <div class="mb-3">
                                <div id="noteTags-@note.Id" class="d-flex flex-wrap gap-1 mb-2">
                                    @foreach (var noteTag in note.NoteTags)
                                    {
                                        <span class="badge" style="background-color: @noteTag.Tag.Color">
                                            @noteTag.Tag.Name
                                            <button class="btn btn-sm btn-link text-white p-0 ms-1 remove-note-tag"
                                                    data-note-id="@note.Id" data-tag-id="@noteTag.TagId">
                                                <i class="bi bi-x"></i>
                                            </button>
                                        </span>
                                    }
                                </div>
                                <button class="btn btn-sm btn-outline-secondary add-tag-btn"
                                        data-note-id="@note.Id" data-bs-toggle="modal" data-bs-target="#tagsModal">
                                    <i class="bi bi-plus"></i> Додати теги
                                </button>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <button class="btn btn-sm btn-outline-primary rounded-pill px-3"
                                        data-bs-toggle="modal" data-bs-target="#editModal-@note.Id">
                                    <i class="bi bi-pencil me-1"></i> Редагувати
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger rounded-pill px-3 delete-note-btn" data-note-id="@note.Id">
                                    <i class="bi bi-trash me-1"></i> Видалити
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Edit Modal -->
                <div class="modal fade" id="editModal-@note.Id" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content border-0 shadow">
                            <div class="modal-header bg-primary text-white">
                                <h5 class="modal-title"><i class="bi bi-pencil-square me-2"></i>Редагувати нотатку</h5>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <form asp-controller="Notes" asp-action="Edit" method="post" class="edit-note-form" data-note-id="@note.Id">
                                <div class="modal-body">
                                    <input type="hidden" name="id" value="@note.Id" />
                                    <div class="mb-3">
                                        <label class="form-label fw-bold">Заголовок*</label>
                                        <input type="text" name="title" class="form-control rounded-3" value="@note.Title" required />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label fw-bold">Вміст</label>
                                        <textarea name="content" class="form-control rounded-3" rows="5" style="resize: none;">@note.Content</textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label fw-bold"><i class="bi bi-alarm me-1"></i>Нагадування</label>
                                        <input type="datetime-local" name="reminderAt" class="form-control rounded-3"
                                               value="@(note.ReminderAt?.ToString("yyyy-MM-ddTHH:mm"))" />
                                    </div>
                                </div>
                                <div class="modal-footer border-0">
                                    <button type="button" class="btn btn-outline-secondary rounded-pill px-4" data-bs-dismiss="modal">Скасувати</button>
                                    <button type="submit" class="btn btn-primary rounded-pill px-4">
                                        <i class="bi bi-save me-1"></i> Зберегти
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <div class="empty-state">
                <i class="bi bi-journal-x display-1 text-muted"></i>
                <h3 class="mt-3">Нотаток не знайдено</h3>
                <p class="text-muted">Почніть зі створення нової нотатки</p>
                <button class="btn btn-primary rounded-pill px-4 mt-2" data-bs-toggle="modal" data-bs-target="#createModal">
                    <i class="bi bi-plus-lg me-2"></i>Створити нотатку
                </button>
            </div>
        </div>
    }
</div>

<!-- Create Modal -->
<div class="modal fade" id="createModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title"><i class="bi bi-file-earmark-plus me-2"></i>Нова нотатка</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-controller="Notes" asp-action="Create" method="post" id="create-note-form">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Заголовок*</label>
                        <input type="text" name="Title" class="form-control rounded-3" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Вміст</label>
                        <textarea name="Content" class="form-control rounded-3" rows="5" style="resize: none;"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold"><i class="bi bi-alarm me-1"></i>Нагадування</label>
                        <input type="datetime-local" name="ReminderAt" class="form-control rounded-3" />
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-outline-secondary rounded-pill px-4" data-bs-dismiss="modal">Скасувати</button>
                    <button type="submit" class="btn btn-primary rounded-pill px-4">
                        <i class="bi bi-save me-1"></i> Зберегти
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Tags Modal -->
<div class="modal fade" id="tagsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Оберіть теги</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="tagsContainer" class="d-flex flex-wrap gap-2"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Скасувати</button>
                <button type="button" class="btn btn-primary" id="addSelectedTags">Додати вибрані теги</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
        .note-content {
            display: -webkit-box;
            -webkit-line-clamp: 4;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
            min-height: 6em;
        }
        
        .empty-state {
            max-width: 500px;
            margin: 0 auto;
        }
        
        .notification {
            position: relative;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            background-color: white;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            border-left: 4px solid #ffc107;
            min-width: 300px;
            animation: slideIn 0.5s forwards;
        }
        
        .notification.fade-out {
            animation: fadeOut 0.5s forwards;
        }
        
        /* Note animations */
        .note-item {
            transition: all 0.5s ease;
        }
        
        .note-card {
            transition: all 0.3s ease;
            transform-origin: top;
        }
        
        .note-card.fade-out {
            animation: fadeOutScale 0.5s forwards;
        }
        
        .note-card.slide-out {
            animation: slideOutRight 0.5s forwards;
        }
        
        .note-card.fall-out {
            animation: fallOut 0.5s forwards;
        }
        
        .new-note {
            animation: fadeInScale 0.5s forwards;
        }
        
        @@keyframes fadeInScale {
            0% {
                opacity: 0;
                transform: scale(0.95);
            }
            100% {
                opacity: 1;
                transform: scale(1);
            }
        }
        
        @@keyframes fadeOutScale {
            0% {
                opacity: 1;
                transform: scale(1);
            }
            100% {
                opacity: 0;
                transform: scale(0.95);
                height: 0;
                padding: 0;
                margin: 0;
                overflow: hidden;
            }
        }
        
        @@keyframes slideOutRight {
            0% {
                opacity: 1;
                transform: translateX(0);
            }
            100% {
                opacity: 0;
                transform: translateX(100%);
                height: 0;
                padding: 0;
                margin: 0;
                overflow: hidden;
            }
        }
        
        @@keyframes fallOut {
            0% {
                opacity: 1;
                transform: translateY(0) rotate(0deg);
            }
            100% {
                opacity: 0;
                transform: translateY(100px) rotate(10deg);
                height: 0;
                padding: 0;
                margin: 0;
                overflow: hidden;
            }
        }
        
        @@keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        @@keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; }
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            let selectedTags = [];
            let currentNoteId = null;

            // Функція для видалення нотатки з анімацією
            function deleteNoteWithAnimation(noteId, animationType = 'fade-out') {
                const $noteCard = $(`#note-card-${noteId}`);
                const $noteItem = $noteCard.closest('.note-item');
                
                // Додаємо клас анімації
                $noteCard.addClass(animationType);
                
                // Видаляємо елемент після завершення анімації
                setTimeout(() => {
                    $noteItem.remove();
                    
                    // Перевіряємо, чи залишилися нотатки
                    if ($('#notes-container .note-item').length === 0) {
                        location.reload(); // Перезавантажуємо сторінку для показу стану "Нотаток не знайдено"
                    }
                }, 500);
                
                // Відправляємо запит на сервер для видалення
                $.post('/Notes/Delete', {
                    id: noteId,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                });
            }

            // Обробник кнопки видалення
            $(document).on('click', '.delete-note-btn', function() {
                const noteId = $(this).data('note-id');
                if (confirm('Ви впевнені, що хочете видалити цю нотатку?')) {
                    const randomAnimation = ['fade-out', 'slide-out', 'fall-out'][Math.floor(Math.random() * 3)];
                    deleteNoteWithAnimation(noteId, randomAnimation);
                }
            });

            // Обробник форми створення нотатки
            $('#create-note-form').on('submit', function(e) {
                e.preventDefault();
                const form = $(this);
                
                $.ajax({
                    url: form.attr('action'),
                    method: form.attr('method'),
                    data: form.serialize(),
                    success: function(response) {
                        $('#createModal').modal('hide');
                        form.trigger('reset');
                        
                        // Якщо це перша нотатка - перезавантажуємо сторінку
                        if ($('#notes-container .note-item').length === 0) {
                            location.reload();
                        } else {
                            // Додаємо нову нотатку з анімацією
                            // Тут потрібно буде додати логіку для додавання нової нотатки до DOM
                            // Наприклад, через AJAX запит для отримання HTML нової нотатки
                        }
                    }
                });
            });

            // Решта функцій залишаються без змін
            function loadTags() {
                $.get('/Tag/GetAll', function(tags) {
                    $('#tagsContainer').empty();
                    tags.forEach(function(tag) {
                        const isSelected = selectedTags.includes(tag.id);
                        $('#tagsContainer').append(`
                            <div class="tag-item badge p-2 mb-2 ${isSelected ? 'selected' : ''}"
                                style="background-color: ${tag.color}"
                                data-tag-id="${tag.id}">
                                ${tag.name}
                                ${isSelected ? '<i class="bi bi-check ms-1"></i>' : ''}
                            </div>
                        `);
                    });
                });
            }

            $(document).on('click', '.tag-item', function() {
                const tagId = $(this).data('tag-id');
                const index = selectedTags.indexOf(tagId);
                if (index === -1) {
                    selectedTags.push(tagId);
                    $(this).addClass('selected');
                    $(this).append('<i class="bi bi-check ms-1"></i>');
                } else {
                    selectedTags.splice(index, 1);
                    $(this).removeClass('selected');
                    $(this).find('i').remove();
                }
            });

            $('#addSelectedTags').click(function() {
                if (!currentNoteId || selectedTags.length === 0) return;
                const requests = selectedTags.map(tagId => {
                    return $.post('/Notes/AddTagToNote', {
                        noteId: currentNoteId,
                        tagId: tagId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    });
                });

                Promise.all(requests)
                    .then(() => {
                        loadNoteTags(currentNoteId);
                        $('#tagsModal').modal('hide');
                        selectedTags = [];
                    })
                    .catch(error => {
                        console.error('Error adding tags:', error);
                    });
            });

            function loadNoteTags(noteId) {
                $.get(`/Notes/GetNoteTags?noteId=${noteId}`, function(tags) {
                    $(`#noteTags-${noteId}`).empty();
                    tags.forEach(function(tag) {
                        $(`#noteTags-${noteId}`).append(`
                            <span class="badge me-1 mb-1" style="background-color: ${tag.color}">
                                ${tag.name}
                                <button class="btn btn-sm btn-link text-white p-0 ms-1 remove-note-tag"
                                    data-note-id="${noteId}" data-tag-id="${tag.id}">
                                    <i class="bi bi-x"></i>
                                </button>
                            </span>
                        `);
                    });
                });
            }

            $(document).on('click', '.add-tag-btn', function() {
                currentNoteId = $(this).data('note-id');
                selectedTags = [];
                loadTags();
            });

            $(document).on('click', '.remove-note-tag', function(e) {
                e.preventDefault();
                const noteId = $(this).data('note-id');
                const tagId = $(this).data('tag-id');
                $.post('/Notes/RemoveTagFromNote', {
                    noteId: noteId,
                    tagId: tagId,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                }, function() {
                    loadNoteTags(noteId);
                });
            });

            @foreach (var note in Model)
            {
                <text>loadNoteTags(@note.Id);</text>
            }

            function showNotification(noteId, title, content) {
                const notificationId = 'notification-' + Date.now();
                const notification = $(`
                    <div id="${notificationId}" class="notification">
                        <div class="d-flex align-items-center mb-2">
                            <i class="bi bi-bell-fill me-2"></i>
                            <h6 class="mb-0">Нагадування</h6>
                        </div>
                        <hr class="my-2">
                        <strong>${title}</strong>
                        <p class="mb-0">${content}</p>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `);
                
                $('#notifications-container').append(notification);
                
                setTimeout(() => {
                    $(`#${notificationId}`).addClass('fade-out');
                    setTimeout(() => $(`#${notificationId}`).remove(), 500);
                }, 10000);
                
                notification.find('.btn-close').click(function() {
                    $(`#${notificationId}`).remove();
                });
            }

            function checkReminders() {
                var now = new Date();
                
                @foreach (var note in Model.Where(n => n.ReminderAt.HasValue))
                {
                    <text>
                    var reminderTime = new Date('@note.ReminderAt?.ToString("o")');
                    
                    if (now >= reminderTime) {
                        showNotification(@note.Id, '@Html.Raw(note.Title.Replace("'", "\\'"))', '@Html.Raw(note.Content.Replace("'", "\\'"))');
                        
                        $.post('/Notes/ClearReminder', { 
                            id: @note.Id,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        }).then(function() {
                            const randomAnimation = ['fade-out', 'slide-out', 'fall-out'][Math.floor(Math.random() * 3)];
                            deleteNoteWithAnimation(@note.Id, randomAnimation);
                        });
                    }
                    </text>
                }
            }

            setInterval(checkReminders, 60000);
            checkReminders();
        });
    </script>
}